{"version":3,"file":"static/js/796.185967c6.chunk.js","mappings":"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","sources":["../node_modules/@sanity/client/src/csm/studioPath.ts","../node_modules/@sanity/client/src/csm/jsonPath.ts","../node_modules/@sanity/client/src/csm/resolveMapping.ts","../node_modules/@sanity/client/src/csm/walkMap.ts","../node_modules/@sanity/client/src/csm/isArray.ts","../node_modules/@sanity/client/src/stega/encodeIntoResult.ts","../node_modules/@sanity/client/src/csm/draftUtils.ts","../node_modules/@sanity/client/src/csm/createEditUrl.ts","../node_modules/@sanity/client/src/stega/filterDefault.ts","../node_modules/@sanity/client/src/stega/stegaEncodeSourceMap.ts","../node_modules/@sanity/client/src/csm/resolveEditInfo.ts"],"sourcesContent":["/** @alpha */\nexport type KeyedSegment = {_key: string}\n\n/** @alpha */\nexport type IndexTuple = [number | '', number | '']\n\n/** @alpha */\nexport type PathSegment = string | number | KeyedSegment | IndexTuple\n\n/** @alpha */\nexport type Path = PathSegment[]\n\nconst rePropName =\n  /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g\n/** @internal */\nexport const reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/\nconst reIndexTuple = /^\\d*:\\d*$/\n\n/** @internal */\nexport function isIndexSegment(segment: PathSegment): segment is number {\n  return typeof segment === 'number' || (typeof segment === 'string' && /^\\[\\d+\\]$/.test(segment))\n}\n\n/** @internal */\nexport function isKeySegment(segment: PathSegment): segment is KeyedSegment {\n  if (typeof segment === 'string') {\n    return reKeySegment.test(segment.trim())\n  }\n\n  return typeof segment === 'object' && '_key' in segment\n}\n\n/** @internal */\nexport function isIndexTuple(segment: PathSegment): segment is IndexTuple {\n  if (typeof segment === 'string' && reIndexTuple.test(segment)) {\n    return true\n  }\n\n  if (!Array.isArray(segment) || segment.length !== 2) {\n    return false\n  }\n\n  const [from, to] = segment\n  return (typeof from === 'number' || from === '') && (typeof to === 'number' || to === '')\n}\n\n/** @internal */\nexport function get<Result = unknown, Fallback = unknown>(\n  obj: unknown,\n  path: Path | string,\n  defaultVal?: Fallback,\n): Result | typeof defaultVal {\n  const select = typeof path === 'string' ? fromString(path) : path\n  if (!Array.isArray(select)) {\n    throw new Error('Path must be an array or a string')\n  }\n\n  let acc: unknown | undefined = obj\n  for (let i = 0; i < select.length; i++) {\n    const segment = select[i]\n    if (isIndexSegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc[segment]\n    }\n\n    if (isKeySegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc.find((item) => item._key === segment._key)\n    }\n\n    if (typeof segment === 'string') {\n      acc =\n        typeof acc === 'object' && acc !== null\n          ? ((acc as Record<string, unknown>)[segment] as Result)\n          : undefined\n    }\n\n    if (typeof acc === 'undefined') {\n      return defaultVal\n    }\n  }\n\n  return acc as Result\n}\n\n/** @alpha */\nexport function toString(path: Path): string {\n  if (!Array.isArray(path)) {\n    throw new Error('Path is not an array')\n  }\n\n  return path.reduce<string>((target, segment, i) => {\n    const segmentType = typeof segment\n    if (segmentType === 'number') {\n      return `${target}[${segment}]`\n    }\n\n    if (segmentType === 'string') {\n      const separator = i === 0 ? '' : '.'\n      return `${target}${separator}${segment}`\n    }\n\n    if (isKeySegment(segment) && segment._key) {\n      return `${target}[_key==\"${segment._key}\"]`\n    }\n\n    if (Array.isArray(segment)) {\n      const [from, to] = segment\n      return `${target}[${from}:${to}]`\n    }\n\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``)\n  }, '')\n}\n\n/** @alpha */\nexport function fromString(path: string): Path {\n  if (typeof path !== 'string') {\n    throw new Error('Path is not a string')\n  }\n\n  const segments = path.match(rePropName)\n  if (!segments) {\n    throw new Error('Invalid path string')\n  }\n\n  return segments.map(parsePathSegment)\n}\n\nfunction parsePathSegment(segment: string): PathSegment {\n  if (isIndexSegment(segment)) {\n    return parseIndexSegment(segment)\n  }\n\n  if (isKeySegment(segment)) {\n    return parseKeySegment(segment)\n  }\n\n  if (isIndexTuple(segment)) {\n    return parseIndexTupleSegment(segment)\n  }\n\n  return segment\n}\n\nfunction parseIndexSegment(segment: string): PathSegment {\n  return Number(segment.replace(/[^\\d]/g, ''))\n}\n\nfunction parseKeySegment(segment: string): KeyedSegment {\n  const segments = segment.match(reKeySegment)\n  return {_key: segments![1]}\n}\n\nfunction parseIndexTupleSegment(segment: string): IndexTuple {\n  const [from, to] = segment.split(':').map((seg) => (seg === '' ? seg : Number(seg)))\n  return [from, to]\n}\n","import * as studioPath from './studioPath'\nimport type {\n  ContentSourceMapParsedPath,\n  ContentSourceMapParsedPathKeyedSegment,\n  ContentSourceMapPaths,\n  Path,\n} from './types'\n\nconst ESCAPE: Record<string, string> = {\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\',\n}\n\nconst UNESCAPE: Record<string, string> = {\n  '\\\\f': '\\f',\n  '\\\\n': '\\n',\n  '\\\\r': '\\r',\n  '\\\\t': '\\t',\n  \"\\\\'\": \"'\",\n  '\\\\\\\\': '\\\\',\n}\n\n/**\n * @internal\n */\nexport function jsonPath(path: ContentSourceMapParsedPath): ContentSourceMapPaths[number] {\n  return `$${path\n    .map((segment) => {\n      if (typeof segment === 'string') {\n        const escapedKey = segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `['${escapedKey}']`\n      }\n\n      if (typeof segment === 'number') {\n        return `[${segment}]`\n      }\n\n      if (segment._key !== '') {\n        const escapedKey = segment._key.replace(/['\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `[?(@._key=='${escapedKey}')]`\n      }\n\n      return `[${segment._index}]`\n    })\n    .join('')}`\n}\n\n/**\n * @internal\n */\nexport function parseJsonPath(path: ContentSourceMapPaths[number]): ContentSourceMapParsedPath {\n  const parsed: ContentSourceMapParsedPath = []\n\n  const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g\n  let match: RegExpExecArray | null\n\n  while ((match = parseRe.exec(path)) !== null) {\n    if (match[1] !== undefined) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push(key)\n      continue\n    }\n\n    if (match[2] !== undefined) {\n      parsed.push(parseInt(match[2], 10))\n      continue\n    }\n\n    if (match[3] !== undefined) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push({\n        _key,\n        _index: -1,\n      })\n      continue\n    }\n  }\n\n  return parsed\n}\n\n/**\n * @internal\n */\nexport function jsonPathToStudioPath(path: ContentSourceMapParsedPath): Path {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._key !== '') {\n      return {_key: segment._key}\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\n/**\n * @internal\n */\nexport function studioPathToJsonPath(path: Path | string): ContentSourceMapParsedPath {\n  const parsedPath = typeof path === 'string' ? studioPath.fromString(path) : path\n\n  return parsedPath.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (Array.isArray(segment)) {\n      throw new Error(`IndexTuple segments aren't supported:${JSON.stringify(segment)}`)\n    }\n\n    if (isContentSourceMapParsedPathKeyedSegment(segment)) {\n      return segment\n    }\n\n    if (segment._key) {\n      return {_key: segment._key, _index: -1}\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\nfunction isContentSourceMapParsedPathKeyedSegment(\n  segment: studioPath.PathSegment | ContentSourceMapParsedPath[number],\n): segment is ContentSourceMapParsedPathKeyedSegment {\n  return typeof segment === 'object' && '_key' in segment && '_index' in segment\n}\n\n/**\n * @internal\n */\nexport function jsonPathToMappingPath(path: ContentSourceMapParsedPath): (string | number)[] {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n","import {jsonPath, jsonPathToMappingPath} from './jsonPath'\nimport type {ContentSourceMap, ContentSourceMapMapping, ContentSourceMapParsedPath} from './types'\n\n/**\n * @internal\n */\nexport function resolveMapping(\n  resultPath: ContentSourceMapParsedPath,\n  csm?: ContentSourceMap,\n):\n  | {\n      mapping: ContentSourceMapMapping\n      matchedPath: string\n      pathSuffix: string\n    }\n  | undefined {\n  if (!csm?.mappings) {\n    return undefined\n  }\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath))\n\n  if (csm.mappings[resultMappingPath] !== undefined) {\n    return {\n      mapping: csm.mappings[resultMappingPath],\n      matchedPath: resultMappingPath,\n      pathSuffix: '',\n    }\n  }\n\n  const mappings = Object.entries(csm.mappings)\n    .filter(([key]) => resultMappingPath.startsWith(key))\n    .sort(([key1], [key2]) => key2.length - key1.length)\n\n  if (mappings.length == 0) {\n    return undefined\n  }\n\n  const [matchedPath, mapping] = mappings[0]\n  const pathSuffix = resultMappingPath.substring(matchedPath.length)\n  return {mapping, matchedPath, pathSuffix}\n}\n","import {isRecord} from '../util/isRecord'\nimport {isArray} from './isArray'\nimport type {ContentSourceMapParsedPath, WalkMapFn} from './types'\n\n/**\n * generic way to walk a nested object or array and apply a mapping function to each value\n * @internal\n */\nexport function walkMap(\n  value: unknown,\n  mappingFn: WalkMapFn,\n  path: ContentSourceMapParsedPath = [],\n): unknown {\n  if (isArray(value)) {\n    return value.map((v, idx) => {\n      if (isRecord(v)) {\n        const _key = v['_key']\n        if (typeof _key === 'string') {\n          return walkMap(v, mappingFn, path.concat({_key, _index: idx}))\n        }\n      }\n\n      return walkMap(v, mappingFn, path.concat(idx))\n    })\n  }\n\n  if (isRecord(value)) {\n    // Handle Portable Text in a faster way\n    if (value._type === 'block' || value._type === 'span') {\n      const result = {...value}\n      if (value._type === 'block') {\n        result.children = walkMap(value.children, mappingFn, path.concat('children'))\n      } else if (value._type === 'span') {\n        result.text = walkMap(value.text, mappingFn, path.concat('text'))\n      }\n      return result\n    }\n\n    return Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))]),\n    )\n  }\n\n  return mappingFn(value, path)\n}\n","/** @internal */\nexport function isArray(value: unknown): value is Array<unknown> {\n  return value !== null && Array.isArray(value)\n}\n","import type {ContentSourceMap} from '@sanity/client/csm'\n\nimport {parseJsonPath} from '../csm/jsonPath'\nimport {resolveMapping} from '../csm/resolveMapping'\nimport {walkMap} from '../csm/walkMap'\nimport type {Encoder} from './types'\n\n/**\n * @internal\n */\nexport function encodeIntoResult<Result>(\n  result: Result,\n  csm: ContentSourceMap,\n  encoder: Encoder,\n): Result {\n  return walkMap(result, (value, path) => {\n    // Only map strings, we could extend this in the future to support other types like integers...\n    if (typeof value !== 'string') {\n      return value\n    }\n\n    const resolveMappingResult = resolveMapping(path, csm)\n    if (!resolveMappingResult) {\n      return value\n    }\n\n    const {mapping, matchedPath} = resolveMappingResult\n    if (mapping.type !== 'value') {\n      return value\n    }\n\n    if (mapping.source.type !== 'documentValue') {\n      return value\n    }\n\n    const sourceDocument = csm.documents[mapping.source.document!]\n    const sourcePath = csm.paths[mapping.source.path]\n\n    const matchPathSegments = parseJsonPath(matchedPath)\n    const sourcePathSegments = parseJsonPath(sourcePath)\n    const fullSourceSegments = sourcePathSegments.concat(path.slice(matchPathSegments.length))\n\n    return encoder({\n      sourcePath: fullSourceSegments,\n      sourceDocument,\n      resultPath: path,\n      value,\n    })\n  }) as Result\n}\n","// nominal/opaque type hack\ntype Opaque<T, K> = T & {__opaqueId__: K}\n\n/** @internal */\nexport type DraftId = Opaque<string, 'draftId'>\n\n/** @internal */\nexport type PublishedId = Opaque<string, 'publishedId'>\n\n/** @internal */\nexport const DRAFTS_FOLDER = 'drafts'\n\n/** @internal */\nexport const VERSION_FOLDER = 'versions'\n\nconst PATH_SEPARATOR = '.'\nconst DRAFTS_PREFIX = `${DRAFTS_FOLDER}${PATH_SEPARATOR}`\nconst VERSION_PREFIX = `${VERSION_FOLDER}${PATH_SEPARATOR}`\n\n/** @internal */\nexport function isDraftId(id: string): id is DraftId {\n  return id.startsWith(DRAFTS_PREFIX)\n}\n\n/** @internal */\nexport function isVersionId(id: string): boolean {\n  return id.startsWith(VERSION_PREFIX)\n}\n\n/** @internal */\nexport function isPublishedId(id: string): id is PublishedId {\n  return !isDraftId(id) && !isVersionId(id)\n}\n\n/** @internal */\nexport function getDraftId(id: string): DraftId {\n  if (isVersionId(id)) {\n    const publishedId = getPublishedId(id)\n    return (DRAFTS_PREFIX + publishedId) as DraftId\n  }\n\n  return isDraftId(id) ? id : ((DRAFTS_PREFIX + id) as DraftId)\n}\n\n/**  @internal */\nexport function getVersionId(id: string, version: string): string {\n  if (version === 'drafts' || version === 'published') {\n    throw new Error('Version can not be \"published\" or \"drafts\"')\n  }\n\n  return `${VERSION_PREFIX}${version}${PATH_SEPARATOR}${getPublishedId(id)}`\n}\n\n/**\n *  @internal\n *  Given an id, returns the versionId if it exists.\n *  e.g. `versions.summer-drop.foo` = `summer-drop`\n *  e.g. `drafts.foo` = `undefined`\n *  e.g. `foo` = `undefined`\n */\nexport function getVersionFromId(id: string): string | undefined {\n  if (!isVersionId(id)) return undefined\n  // eslint-disable-next-line unused-imports/no-unused-vars\n  const [_versionPrefix, versionId, ..._publishedId] = id.split(PATH_SEPARATOR)\n\n  return versionId\n}\n\n/** @internal */\nexport function getPublishedId(id: string): PublishedId {\n  if (isVersionId(id)) {\n    // make sure to only remove the versions prefix and the bundle name\n    return id.split(PATH_SEPARATOR).slice(2).join(PATH_SEPARATOR) as PublishedId as PublishedId\n  }\n\n  if (isDraftId(id)) {\n    return id.slice(DRAFTS_PREFIX.length) as PublishedId\n  }\n\n  return id as PublishedId\n}\n","import {getPublishedId, getVersionFromId, isPublishedId, isVersionId} from './draftUtils'\nimport {jsonPathToStudioPath} from './jsonPath'\nimport * as studioPath from './studioPath'\nimport type {CreateEditUrlOptions, EditIntentUrl, StudioBaseUrl} from './types'\n\n/** @internal */\nexport function createEditUrl(options: CreateEditUrlOptions): `${StudioBaseUrl}${EditIntentUrl}` {\n  const {\n    baseUrl,\n    workspace: _workspace = 'default',\n    tool: _tool = 'default',\n    id: _id,\n    type,\n    path,\n    projectId,\n    dataset,\n  } = options\n\n  if (!baseUrl) {\n    throw new Error('baseUrl is required')\n  }\n  if (!path) {\n    throw new Error('path is required')\n  }\n  if (!_id) {\n    throw new Error('id is required')\n  }\n  if (baseUrl !== '/' && baseUrl.endsWith('/')) {\n    throw new Error('baseUrl must not end with a slash')\n  }\n\n  const workspace = _workspace === 'default' ? undefined : _workspace\n  const tool = _tool === 'default' ? undefined : _tool\n  const id = getPublishedId(_id)\n  const stringifiedPath = Array.isArray(path)\n    ? studioPath.toString(jsonPathToStudioPath(path))\n    : path\n\n  // eslint-disable-next-line no-warning-comments\n  // @TODO Using searchParams as a temporary workaround until `@sanity/overlays` can decode state from the path reliably\n  const searchParams = new URLSearchParams({\n    baseUrl,\n    id,\n    type,\n    path: stringifiedPath,\n  })\n  if (workspace) {\n    searchParams.set('workspace', workspace)\n  }\n  if (tool) {\n    searchParams.set('tool', tool)\n  }\n  if (projectId) {\n    searchParams.set('projectId', projectId)\n  }\n  if (dataset) {\n    searchParams.set('dataset', dataset)\n  }\n  if (isPublishedId(_id)) {\n    searchParams.set('perspective', 'published')\n  } else if (isVersionId(_id)) {\n    const versionId = getVersionFromId(_id)!\n    searchParams.set('perspective', versionId)\n  }\n\n  const segments = [baseUrl === '/' ? '' : baseUrl]\n  if (workspace) {\n    segments.push(workspace)\n  }\n  const routerParams = [\n    'mode=presentation',\n    `id=${id}`,\n    `type=${type}`,\n    `path=${encodeURIComponent(stringifiedPath)}`,\n  ]\n  if (tool) {\n    routerParams.push(`tool=${tool}`)\n  }\n  segments.push('intent', 'edit', `${routerParams.join(';')}?${searchParams}`)\n  return segments.join('/') as unknown as `${StudioBaseUrl}${EditIntentUrl}`\n}\n","import type {ContentSourceMapParsedPath, FilterDefault} from './types'\n\nexport const filterDefault: FilterDefault = ({sourcePath, resultPath, value}) => {\n  // Skips encoding on URL or Date strings, similar to the `skip: 'auto'` parameter in vercelStegaCombine()\n  if (isValidDate(value) || isValidURL(value)) {\n    return false\n  }\n\n  const endPath = sourcePath.at(-1)\n  // Never encode slugs\n  if (sourcePath.at(-2) === 'slug' && endPath === 'current') {\n    return false\n  }\n\n  // Skip underscored keys, and strings that end with `Id`, needs better heuristics but it works for now\n  if (typeof endPath === 'string' && (endPath.startsWith('_') || endPath.endsWith('Id'))) {\n    return false\n  }\n\n  // Don't encode into anything that is suggested it'll render for SEO in meta tags\n  if (\n    sourcePath.some(\n      (path) => path === 'meta' || path === 'metadata' || path === 'openGraph' || path === 'seo',\n    )\n  ) {\n    return false\n  }\n\n  // If the sourcePath or resultPath contains something that sounds like a type, like iconType, we skip encoding, as it's most\n  // of the time used for logic that breaks if it contains stega characters\n  if (hasTypeLike(sourcePath) || hasTypeLike(resultPath)) {\n    return false\n  }\n\n  // Finally, we ignore a bunch of paths that are typically used for page building\n  if (typeof endPath === 'string' && denylist.has(endPath)) {\n    return false\n  }\n\n  return true\n}\n\nconst denylist = new Set([\n  'color',\n  'colour',\n  'currency',\n  'email',\n  'format',\n  'gid',\n  'hex',\n  'href',\n  'hsl',\n  'hsla',\n  'icon',\n  'id',\n  'index',\n  'key',\n  'language',\n  'layout',\n  'link',\n  'linkAction',\n  'locale',\n  'lqip',\n  'page',\n  'path',\n  'ref',\n  'rgb',\n  'rgba',\n  'route',\n  'secret',\n  'slug',\n  'status',\n  'tag',\n  'template',\n  'theme',\n  'type',\n  'textTheme',\n  'unit',\n  'url',\n  'username',\n  'variant',\n  'website',\n])\n\nfunction isValidDate(dateString: string) {\n  return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? Boolean(Date.parse(dateString)) : false\n}\n\nfunction isValidURL(url: string) {\n  try {\n    new URL(url, url.startsWith('/') ? 'https://acme.com' : undefined)\n  } catch {\n    return false\n  }\n  return true\n}\n\nfunction hasTypeLike(path: ContentSourceMapParsedPath): boolean {\n  return path.some((segment) => typeof segment === 'string' && segment.match(/type/i) !== null)\n}\n","import {vercelStegaCombine} from '@vercel/stega'\n\nimport {createEditUrl} from '../csm/createEditUrl'\nimport {jsonPathToStudioPath} from '../csm/jsonPath'\nimport {resolveStudioBaseRoute} from '../csm/resolveEditInfo'\nimport {reKeySegment, toString as studioPathToString} from '../csm/studioPath'\nimport {encodeIntoResult} from './encodeIntoResult'\nimport {filterDefault} from './filterDefault'\nimport {\n  type ContentSourceMap,\n  type ContentSourceMapParsedPath,\n  type InitializedStegaConfig,\n} from './types'\n\nconst TRUNCATE_LENGTH = 20\n\n/**\n * Uses `@vercel/stega` to embed edit info JSON into strings in your query result.\n * The JSON payloads are added using invisible characters so they don't show up visually.\n * The edit info is generated from the Content Source Map (CSM) that is returned from Sanity for the query.\n * @public\n */\nexport function stegaEncodeSourceMap<Result = unknown>(\n  result: Result,\n  resultSourceMap: ContentSourceMap | undefined,\n  config: InitializedStegaConfig,\n): Result {\n  const {filter, logger, enabled} = config\n  if (!enabled) {\n    const msg = \"config.enabled must be true, don't call this function otherwise\"\n    logger?.error?.(`[@sanity/client]: ${msg}`, {result, resultSourceMap, config})\n    throw new TypeError(msg)\n  }\n\n  if (!resultSourceMap) {\n    logger?.error?.('[@sanity/client]: Missing Content Source Map from response body', {\n      result,\n      resultSourceMap,\n      config,\n    })\n    return result\n  }\n\n  if (!config.studioUrl) {\n    const msg = 'config.studioUrl must be defined'\n    logger?.error?.(`[@sanity/client]: ${msg}`, {result, resultSourceMap, config})\n    throw new TypeError(msg)\n  }\n\n  const report: Record<'encoded' | 'skipped', {path: string; length: number; value: string}[]> = {\n    encoded: [],\n    skipped: [],\n  }\n\n  const resultWithStega = encodeIntoResult(\n    result,\n    resultSourceMap,\n    ({sourcePath, sourceDocument, resultPath, value}) => {\n      // Allow userland to control when to opt-out of encoding\n      if (\n        (typeof filter === 'function'\n          ? filter({sourcePath, resultPath, filterDefault, sourceDocument, value})\n          : filterDefault({sourcePath, resultPath, filterDefault, sourceDocument, value})) === false\n      ) {\n        if (logger) {\n          report.skipped.push({\n            path: prettyPathForLogging(sourcePath),\n            value: `${value.slice(0, TRUNCATE_LENGTH)}${\n              value.length > TRUNCATE_LENGTH ? '...' : ''\n            }`,\n            length: value.length,\n          })\n        }\n        return value\n      }\n\n      if (logger) {\n        report.encoded.push({\n          path: prettyPathForLogging(sourcePath),\n          value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? '...' : ''}`,\n          length: value.length,\n        })\n      }\n\n      const {baseUrl, workspace, tool} = resolveStudioBaseRoute(\n        typeof config.studioUrl === 'function'\n          ? config.studioUrl(sourceDocument)\n          : config.studioUrl!,\n      )\n      if (!baseUrl) return value\n      const {_id: id, _type: type, _projectId: projectId, _dataset: dataset} = sourceDocument\n\n      return vercelStegaCombine(\n        value,\n        {\n          origin: 'sanity.io',\n          href: createEditUrl({\n            baseUrl,\n            workspace,\n            tool,\n            id,\n            type,\n            path: sourcePath,\n            ...(!config.omitCrossDatasetReferenceData && {dataset, projectId}),\n          }),\n        },\n        // We use custom logic to determine if we should skip encoding\n        false,\n      )\n    },\n  )\n\n  if (logger) {\n    const isSkipping = report.skipped.length\n    const isEncoding = report.encoded.length\n    if (isSkipping || isEncoding) {\n      ;(logger?.groupCollapsed || logger.log)?.('[@sanity/client]: Encoding source map into result')\n      logger.log?.(\n        `[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`,\n      )\n    }\n    if (report.encoded.length > 0) {\n      logger?.log?.(`[@sanity/client]: Table of encoded paths`)\n      ;(logger?.table || logger.log)?.(report.encoded)\n    }\n    if (report.skipped.length > 0) {\n      const skipped = new Set<string>()\n      for (const {path} of report.skipped) {\n        skipped.add(path.replace(reKeySegment, '0').replace(/\\[\\d+\\]/g, '[]'))\n      }\n      logger?.log?.(`[@sanity/client]: List of skipped paths`, [...skipped.values()])\n    }\n\n    if (isSkipping || isEncoding) {\n      logger?.groupEnd?.()\n    }\n  }\n\n  return resultWithStega\n}\n\nfunction prettyPathForLogging(path: ContentSourceMapParsedPath): string {\n  return studioPathToString(jsonPathToStudioPath(path))\n}\n","import {parseJsonPath} from './jsonPath'\nimport {resolveMapping} from './resolveMapping'\nimport type {\n  CreateEditUrlOptions,\n  ResolveEditInfoOptions,\n  StudioBaseRoute,\n  StudioBaseUrl,\n  StudioUrl,\n} from './types'\n\n/** @internal */\nexport function resolveEditInfo(options: ResolveEditInfoOptions): CreateEditUrlOptions | undefined {\n  const {resultSourceMap: csm, resultPath} = options\n  const {mapping, pathSuffix} = resolveMapping(resultPath, csm) || {}\n\n  if (!mapping) {\n    // console.warn('no mapping for path', { path: resultPath, sourceMap: csm })\n    return undefined\n  }\n\n  if (mapping.source.type === 'literal') {\n    return undefined\n  }\n\n  if (mapping.source.type === 'unknown') {\n    return undefined\n  }\n\n  const sourceDoc = csm.documents[mapping.source.document]\n  const sourcePath = csm.paths[mapping.source.path]\n\n  if (sourceDoc && sourcePath) {\n    const {baseUrl, workspace, tool} = resolveStudioBaseRoute(\n      typeof options.studioUrl === 'function' ? options.studioUrl(sourceDoc) : options.studioUrl,\n    )\n    if (!baseUrl) return undefined\n    const {_id, _type, _projectId, _dataset} = sourceDoc\n    return {\n      baseUrl,\n      workspace,\n      tool,\n      id: _id,\n      type: _type,\n      path: parseJsonPath(sourcePath + pathSuffix),\n      projectId: _projectId,\n      dataset: _dataset,\n    } satisfies CreateEditUrlOptions\n  }\n\n  return undefined\n}\n\n/** @internal */\nexport function resolveStudioBaseRoute(studioUrl: StudioUrl): StudioBaseRoute {\n  let baseUrl: StudioBaseUrl = typeof studioUrl === 'string' ? studioUrl : studioUrl.baseUrl\n  if (baseUrl !== '/') {\n    baseUrl = baseUrl.replace(/\\/$/, '')\n  }\n  if (typeof studioUrl === 'string') {\n    return {baseUrl}\n  }\n  return {...studioUrl, baseUrl}\n}\n"],"names":["reKeySegment","toString","path","Array","isArray","Error","reduce","target","segment","i","segmentType","concat","test","trim","isKeySegment","_key","from","to","JSON","stringify","ESCAPE","UNESCAPE","parseJsonPath","parsed","parseRe","match","exec","key","replace","m","push","_index","parseInt","jsonPathToStudioPath","map","resolveMapping","resultPath","csm","mappings","resultMappingPath","join","jsonPath","mapping","matchedPath","pathSuffix","Object","entries","filter","_ref","startsWith","sort","_ref2","_ref3","key1","key2","length","substring","walkMap","value","mappingFn","arguments","undefined","v","idx","isRecord","_type","result","_objectSpread","children","text","fromEntries","_ref4","k","encodeIntoResult","encoder","resolveMappingResult","type","source","sourceDocument","documents","document","sourcePath","paths","matchPathSegments","fullSourceSegments","slice","PATH_SEPARATOR","DRAFTS_PREFIX","VERSION_PREFIX","isDraftId","id","isVersionId","createEditUrl","options","baseUrl","workspace","_workspace","tool","_tool","_id","projectId","dataset","endsWith","split","getPublishedId","stringifiedPath","searchParams","URLSearchParams","set","isPublishedId","versionId","_versionPrefix","_publishedId","getVersionFromId","segments","routerParams","encodeURIComponent","filterDefault","_ref5","dateString","Date","parse","url","URL","_unused","isValidURL","endPath","at","some","hasTypeLike","denylist","has","Set","TRUNCATE_LENGTH","stegaEncodeSourceMap","resultSourceMap","config","_logger$error2","logger","enabled","_logger$error","msg","error","call","TypeError","studioUrl","_logger$error3","report","encoded","skipped","resultWithStega","_ref6","prettyPathForLogging","resolveStudioBaseRoute","_projectId","_dataset","C","origin","href","omitCrossDatasetReferenceData","_ref7","_logger$log","_logger$log2","_ref8","_logger$groupEnd","isSkipping","isEncoding","groupCollapsed","log","table","_logger$log3","add","values","groupEnd"],"sourceRoot":""}